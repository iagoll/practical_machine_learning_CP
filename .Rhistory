e
sum(p.adjust(pValues,method="BH") < 0.05)
table(pValues2 < 0.05, trueStatus)
table(pValues2 < 0.05, trueStatus)
24/500
sum(p.adjust(pValues,method="bonferroni") < 0.05)
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
sum(1:6)/6
print(g2)
print(g2)
head(sh)
head(nh)
nh
median()
nh
median(resampledMedians)
median(sh)
median(resampledMedians)
sam <- sample(fh,nh*B,replace=TRUE)
sam <- sample(fh,nh*B,replace=TRUE)
resam <- matrix(sam,B,nh)
resam <- matrix(sam,B,nh)
meds <- apply(resam,1,median)
meds <- apply(resam,1,median)
median(meds)-median(fh)
sd(meds)
sd(resampledMedians)
sd(resampledMedians)
quantile(resampledMedians,c(.025,.975))
quantile(resampledMedians,c(.025,.975))
quantile(meds,c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range()
range(Cdata$count)
BCcounts
group
testStat()
testStat
testStat()
testStat
obs <- testStat(BCcounts,group)
obs
obs
mean(Bdata$count)-mean(Cdata$count)
sample(group)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms>obs)
testStat(DEcounts,group)
testStat(DEcounts,group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
library(UsingR)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
lsfit(x,w)
cor(x,w)
cor(w,x)
fit <- lm(x ~ w)
fit
lsmeans(fit)
install.packages("lsmeans")
library(lsmeans)
lsmeans(fit)
plot(x=X,y=w)
x
plot(x,w)
plot(lm(x,w))
plot(fit
)
summary(fit)
a <- w*(x-m)^2
a <- function(m) {w*(x-m)^2}
a(0,0025)
a(0.0025)
a <- function(m) {sum(w*(x-m)^2)}
a(0.0025)
a(1.077)
a(0.1471)
a(0.300)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y ~ x)
fit
data(mtcars)
fit <- lm(mpg ~ weight)
fit <- lm(mpg ~ weight, data=mtcars)
fit <- lm(mtcars$mpg ~ mtcars$wt, data=mtcars)
fit
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x1 <- x/mean(x)
var(x1)
x1[1]
x2 <- x1/var(x1)
x2
x1 <- x / var(x)
x1
var(x1)
a1 <- scale(x)
a1[1]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y ~ x)
fit
fit <- lm(x ~ y)
fit
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y ~ x)
fit
plot(x,y)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
fit
summary(fit)
data(mtcars); fit <- lm(mtcars$mpg ~ mtcars$wt, data=mtcars)
summary(fit)
mean(mtcars$wt)
plot(mtcars$wt)
plot(mtcars$wt,mtcars$mpg)
lm(mtcars$wtmtcars$mpg))
lm(mtcars$wt ~ mtcars$mpg)
plot(lm(mtcars$wt ~ mtcars$mpg))
plot(lm(mtcars$wt ~ mtcars$mpg))
?mtcars
a <- data(mtcars)
data("mtcars")
dataset(mtcars)
View(mtcars)
plot(mtcars$wt,mtcars$mpg)
fit
install.packages("caret")
install.packages("kernlab")
install.packages("UsingR")
install.packages("manipulate")
install.packages("ggplot2")
install.packages("stars")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages(c("data.table", "devtools", "dplyr", "evaluate", "formatR", "highr", "Hmisc", "jsonlite", "MASS", "mime", "Rcpp", "RMySQL", "tidyr", "xml2"))
a1 <- matrix(0,18,10)
rownames(a1) <- c(1:18)
colnames(a1) <- c("Pts","RebDef","RebOf","Ast","stl",
"Tov","Blk","PF","Fouls Rec","+ / -")
View(a1)
bb <- rnorm(18,77.4,4.2)
bb
a1[,1] <- rnorm(18,77.4,4.2)
a1[,2] <- rnorm(18,23.5,1.6)
a1[,3] <- rnorm(18,10.1,0.9)
a1[,4] <- rnorm(18,15.1,1.7)
a1[,5] <- rnorm(18,7.4,1)
a1[,6] <- rnorm(18,12.9,0.7)
a1[,7] <- rnorm(18,2.5,0.6)
a1[,8] <- rnorm(18,21.1,1)
a1[,9] <- rnorm(18,21.1,1)
a1[,10] <- rnorm(18,0,4.9)
a1 <- matrix(0,18,10)
rownames(a1) <- c(1:18)
colnames(a1) <- c("Pts","RebDef","RebOf","Ast","stl",
"Tov","Blk","PF","Fouls Rec","+ / -")
set.seed(2)
a1[,1] <- rnorm(18,77.4,4.2)
a1[,2] <- rnorm(18,23.5,1.6)
a1[,3] <- rnorm(18,10.1,0.9)
a1[,4] <- rnorm(18,15.1,1.7)
a1[,5] <- rnorm(18,7.4,1)
a1[,6] <- rnorm(18,12.9,0.7)
a1[,7] <- rnorm(18,2.5,0.6)
a1[,8] <- rnorm(18,21.1,1)
a1[,9] <- rnorm(18,21.1,1)
a1[,10] <- rnorm(18,0,4.9)
View(a1)
stars(a1)
stars(a1, nrow = 18, ncol = 10)
install.packages("grDevices")
install.packages("grDevices")
install.packages("psych")
library(psych)
radar(a1)
radar(a1[,1])
spider(a1[,1:10],rownames(a1),data = a1)
spider(a1[,1],rownames(a1),data = a1)
spider(a1)
a1
spider(a1[,1],a1[,2])
bb <- as.data.frame(a1)
spider(bb$Pts,0,bb)
radar
radar(bb)
spider(a1[1,],a1[,1])
spider(a1[1,],a1[,1],data = a1)
spider(a1[1,],a1[,1:10],data = a1)
a1[,1]
a1[1,]
install.packages("fmsb")
library(fmsb)
radarchart(a1)
radarchart(bb)
a1 <- matrix(0,20,10)
rownames(a1) <- c(1:18)
colnames(a1) <- c("Pts","RebDef","RebOf","Ast","stl",
"Tov","Blk","PF","Fouls Rec","+ / -")
set.seed(2)
a1[1,] <- c(90,28,12,20,10,15,4,25,25,12)
a1[2,] <- c(70,20,7,10,5,10,1,16,16,-12)
a1[3:20,1] <- rnorm(18,77.4,4.2)
a1[3:20,2] <- rnorm(18,23.5,1.6)
a1[3:20,3] <- rnorm(18,10.1,0.9)
a1[3:20,4] <- rnorm(18,15.1,1.7)
a1[3:20,5] <- rnorm(18,7.4,1)
a1[3:20,6] <- rnorm(18,12.9,0.7)
a1[3:20,7] <- rnorm(18,2.5,0.6)
a1[3:20,8] <- rnorm(18,21.1,1)
a1[3:20,9] <- rnorm(18,21.1,1)
a1[3:20,10] <- rnorm(18,0,4.9)
bb <- as.data.frame(a1)
radarchart(bb)
radarchart(bb, axistype = 3)
radarchart(bb, axistype = 2)
radarchart(bb, axistype = 5)
radarchart(bb, axistype = 4)
radarchart(bb, axistype = 2)
radarchart(bb, axistype = 1)
radarchart(bb, axistype = 2)
radarchart(bb[1:5,], axistype = 2)
radarchart(bb[1:5,], axistype = 3)
radarchart(bb[1:5,], axistype = 4)
radarchart(bb[1:5,], axistype = 5)
radarchart(bb[1:5,], axistype = 6)
radarchart(bb[1:5,], axistype = 1)
radarchart(bb[1:5,], axistype = 2)
radarchart(bb[1:5,], axistype = 2, paxislabels = c(70,,,90,8,,12))
radarchart(bb[1:5,], paxislabels = c(70,,,90,8,,12))
radarchart(bb[1:5,], axistype = 2, caxislabels = c("Pts","RebDef","RebOf","Ast","stl","Tov","Blk","PF","Fouls Rec","+ / -"))
radarchart(bb[1:5,], axistype = 2, vlabels = c("Pts","RebDef","RebOf","Ast","stl","Tov","Blk","PF","Fouls Rec","+ / -"))
radarchart(bb[1:5,], axistype = 2, caxislabels = c("Pts","RebDef","RebOf","Ast","stl","Tov","Blk","PF","Fouls Rec","+ / -"))
plot(1:18,bb[,1])
plot(1:18,bb[3:20,1])
radarchart(bb[1:5,], axistype = 2, vlabels = c("Pts","RebDef","RebOf","Ast","stl","Tov","Blk","PF","Fouls Rec","+ / -"))
spider(y=bb[3,],x=1:18,data = bb)
spider(y=bb$Pts,x=1:18,data = bb)
spider(y=bb$Pts,x=0,data = bb)
spider(y=bb,x=colnames(bb),data = bb)
spider(y=bb[3,20],x=colnames(bb),data = bb)
spider(y=bb[3:20,],x=colnames(bb),data = bb)
bb[3,]
View(bb)
y <- bb[3,]
x <- colnames(bb)
spider(y,x,data = bb)
x <- bb[2,]
spider(y,x,data = bb)
op <- par(mfrow=c(3,2))
spider(y=1,x=2:9,data=Thurstone,connect=FALSE) #a radar plot
spider(y=1,x=2:9,data=Thurstone) #same plot as a spider plot
spider(y=1:3,x=4:9,data=Thurstone,overlay=TRUE)
#make a somewhat oversized plot
spider(y=26:28,x=1:25,data=cor(bfi,use="pairwise"),fill=TRUE,scale=2)
par(op)
op <- par(mfrow=c(3,2))
spider(y=1,x=2:9,data=Thurstone,connect=FALSE) #a radar plot
spider(y=1,x=2:9,data=Thurstone) #same plot as a spider plot
spider(y=1:3,x=4:9,data=Thurstone,overlay=TRUE)
op <- par(mfrow=c(1,1))
spider(y=1,x=2:9,data=Thurstone,connect=FALSE) #a radar plot
spider(y=1,x=2:9,data=Thurstone) #same plot as a spider plot
spider(y=1:3,x=4:9,data=Thurstone,overlay=TRUE)
Thurstone
a4 <- Thurstone
View(a4)
op <- par(mfrow=c(1,1))
spider(y=1,x=2:9,data=Thurstone,connect=FALSE) #a radar plot
spider(y=1:3,x=4:9,data=Thurstone,overlay=TRUE)
spider(y=3:5, x=1:10, bb, overlay=TRUE)
spider(y=3:5, x=1:10, bb, overlay=TRUE, scale = T)
spider(y=3:5, x=1:10, bb, overlay=TRUE, scale = F)
spider(y=3:5, x=1:10, bb, overlay=TRUE, rescale = T)
spider(y=3:5, x=1:10, bb, overlay=TRUE, rescale = T, connect = T)
spider(y=3:5, x=1:10, bb, overlay=TRUE, rescale = T, connect = F)
spider(y=3:5, x=1:10, bb, overlay=TRUE, rescale = T, connect = T)
spider(y=1:5, x=1:10, bb, overlay=TRUE, rescale = T, connect = T)
spider(y=3:20, x=1:10, bb, overlay=TRUE, rescale = T, connect = T)
spider(y=3:4, x=1:10, bb, overlay=TRUE, rescale = T, connect = T)
radarchart(bb[1:5,], axistype = 2)
radarchart(bb[1:5,], axistype = 0)
radarchart(bb[1:5,], axistype = 0, seg = 10)
?radarchart
radarchart(bb[1:5,], axistype = 0, seg = 10)
legend("right")
legend("right",legend = c(3:5))
legend(4, legend = c(3:5),lty = 1, xjust = 1, yjust = 1,title = "Lines")
radarchart(bb[1:5,], axistype = 0, seg = 10)
legend(4, legend = c(3:5),lty = 1, xjust = 1, yjust = 1,title = "Lines")
legend("right", legend = c(3:5),lty = 1, xjust = 1, yjust = 1,title = "Lines")
legend("right",c(3:5),pch = 19, col=c(3:5))
radarchart(bb[1:5,], axistype = 0, seg = 10)
legend("right",legend=c(3:5),pch = 19, col=c(3:5))
legend("right",legend=c(3:5),pch = 19, col=c("red","black","green"))
radarchart(bb[1:5,], vlabels = c(3:5),axistype = 0, seg = 10)
radarchart(bb[1:5,], axistype = 0, seg = 10)
legend("right",legend=c(3:5),pch = 19, col=c("red","black","green"))
radarchart(bb[1:5,], axistype = 2, seg = 10)
legend("right",legend=c(3:5),pch = 19, col=c("red","black","green"))
bb[3,1]
bb[4,1]
bb[5,1]
radarchart(bb[1:5,], axistype = 2, seg = 10)
legend("right",legend=c(3:5),pch = 19, col=c("black","red","green"))
bb[,3]
library(caret)
install.packages("ISLR")
install.packages("splines")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
View(adData)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(predictors)
View(training)
tt <- training[,58:59]
tt <- training[,58:69]
preProcess(tt)
a <- preProcess(tt)
a
summary(a)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
tt <- training[,c(1,58:69)]
prett <- preProcess(tt)
modfit <- train(diagnosis ~ ., method="glm", data=training)
e1071
install.packages("e1071")
modfit <- train(diagnosis ~ ., method="glm", data=training)
install.packages(c("caret", "lsmeans", "rmarkdown", "viridis"))
install.packages("markdown")
library(markdown)
install.packages(c("foreach", "iterators", "viridis"))
?lm
?colSums
?show
?dgamma
showMethods("show")
getMethod("show")
install.packages("DDPQuiz3")
?show
matrix(0,12,6)
a1 <- matrix(0,12,6)
colnames(a1) <- c("Pts","Reb","As","Robos","Perd","Tap")
a2 <- as.data.frame(a1)
View(a2)
a2[,1] <- rnorm(12, 92, 3)
a2[,1] <- rnorm(12, 7.7, 3)
sum(a2$Pts)
a2[,1] <- rnorm(12, 7.2, 3)
sum(a2$Pts)
a2[,1] <- rnorm(12, 7.4, 3)
sum(a2$Pts)
a2[,2] <- rnorm(12, 3, 1.3)
sum(a2$Reb)
a2[,3] <- rnorm(12, 1.5, 1.5)
sum(a2$Ast)
a2[,3] <- rnorm(12, 1.5, 1.5)
a2[,3] <- abs(rnorm(12, 1.5, 1.5))
sum(a2$Ast)
a2[,3] <- abs(rnorm(12, 1.5, 1.5))
sum(a2$Ast)
colSums(a2[,3])
a2[,4] <- abs(rnorm(12, 0.7, 0.3))
sum(a2$Robos)
a2[,4] <- abs(rnorm(12, 0.7, 0.3))
sum(a2$Robos)
sum(a2$As)
a2[,5] <- abs(rnorm(12, 1.1, 0.4))
sum(a2$Perd)
a2[,5] <- abs(rnorm(12, 1.1, 0.4))
sum(a2$Perd)
a2[,6] <- abs(rnorm(12, 0.3, 0.3))
sum(a2$Tap)
a2[,2] <- abs(rnorm(12, 3, 1.3))
sum(a2$Reb)
a2[,6] <- abs(rnorm(12, 0.3, 0.6))
sum(a2$Tap)
a2[,6] <- abs(rnorm(12, 0.3, 1.5))
sum(a2$Tap)
a2[,6] <- a2[,6 - 1]
a2[,6] <- abs(rnorm(12, 0.3, 1.5))
a2[,6] <- a2[,6]-17
a2[,6] <- abs(rnorm(12, 0.3, 1.5))
sum(a2$Tap)
a2[,6] <- a2[,6]-1
a2[,6] <- abs(a2[,6])
sum(a2$Tap)
a2[10,6] <- 1.1
sum(a2$Tap)
a2[10,6] <- 0.8
sum(a2$Tap)
a2[10,6] <- 1.1
sum(a2$Tap)
a2[,6] <- a2[,6]-0.2
sum(a2$Tap)
a2[,6] <- abs(a2[,6])
sum(a2$Tap)
a2[1,]
View(a2)
plot(a2$Reb,a2$As)
setwd("./pml")
install.packages("rattle")
library(rattle)
library(caret)
library(rpart)
library(randomForest)
library(rattle)
tr1 <- read.csv("pml-training.csv",na.strings=c("NA",""), header=TRUE)
te1 <- read.csv("pml-testing.csv", na.strings=c("NA",""), header=TRUE)
v1 <- vector(length = 160)
for(i in 1:160){v1[i] <- sum(is.na(tr1[,i]))}
v2 <- vector(length = 160)
for(i in 1:160){v2[i] <- sum(is.na(te1[,i]))}
tr1 <- tr1[,which(v1==0)]
te1 <- te1[,which(v2==0)]
inTrain <- createDataPartition(y=tr1$classe, p=0.7, list = F)
training <- tr1[inTrain,]
testing <- tr1[-inTrain,]
modFit1 <- train(classe ~ ., method = "rpart", data = training)
modFit1$finalModel
modFit1
modFit1$finalModel
modFit1$results
plot(modFit1$finalModel,uniform = T,main="Tree")
text(modFit1$finalModel,use.n = T,all = T,cex=0.8)
View(training)
View(tr1)
tr1 <- tr1[,c(3,4,8:60)]
View(tr1)
View(te1)
tr1 <- read.csv("pml-training.csv",na.strings=c("NA",""), header=TRUE)
tr1 <- tr1[,which(v1==0)]
View(tr1)
tr1 <- tr1[,c(7:60)]
te1 <- te1[,c(7:60)]
names(tr1)
names(te1)
inTrain <- createDataPartition(y=tr1$classe, p=0.7, list = F)
training <- tr1[inTrain,]
testing <- tr1[-inTrain,]
modFit1 <- train(classe ~ ., method = "rpart", data = training)
modnb1 <- train(classe ~ ., method = "nb", data = training)
install.packages("klaR")
install.packages("klaR")
library(klaR)
modnb1 <- train(classe ~ ., method = "nb", data = training)
library(caret)
modnb1 <- train(classe ~ ., method = "nb", data = training)
modFit1 <- train(classe ~ ., method = "rpart", data = training)
